{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh14500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Frontal
\b0 \
\
Cuando queremos moldear sonidos, necesitamos alguna forma de control para par\'e1metros establecidos. Para este prop\'f3sito, usamos "envelopes" o envolventes, que son curvas de control definidas con secuencias de arrays.\
\
El generador para envolventes en SuperCollider es "EnvGen", mientras que el envolvente en s\'ed es "Env". De ahora en adelante me referir\'e9 a envolventes la palabra en ingl\'e9s "envelopes", pues el nombre en castellano es my inusual.\
\
Cuando creamos un envelope a ser usado en una se\'f1al, necesitamos definir una serie de:\
- valores (los puntos por donde vamos a pasar)\
- tiempo (el tiempo en el que atravesar dichos puntos)\
- curvas (el tipo de interpolaci\'f3n a usar)\
\
Como hab\'eda mencionado en un v\'eddeo anterior, interpolar significa llenar los valores que existen entre dos puntos.\
\

\b C\'f3digo
\b0 \
\
Observemos como crear valores en un objeto "Env" y hagamos un gr\'e1fico del resultado:\
\
Los par\'e1metros importantes de Env son:\
\
Env(levels: valores, times: tiempos, curve: curvas);\
\
/Aqui un envelope que va de 0 a 1 en 5 segundos con interpolaci\'f3n linear\
\
Env([0, 1], [5], [\\lin]).plot;\
\
// Un envelope que va de 0.001 a 1 en 2.5 segundos y de 1 a 0.001 en 2.5 segundos con interpolaci\'f3n exponencial (curvas exponenciales nunca pueden tener un valor de 0 absoluto)\
Env([0.001, 1, 0.001], [2.5, 2.5], ['exp']).plot;\
\
// Un envelope que va de 0 a 1, de 1 a 0.5, se mantiene en 0.5 y luega va a 0 en 0.25, 0.25, 0.25, 0.25 segundos respectivamente, con una curva linear. Este es el envelope 'cl\'e1sico':\
// ataque, decaimiento, sostenimiento y relajaci\'f3n\
Env([0, 1, 0.5, 0.5, 0.0], [0.25, 0.25, 0.25, 0.25], [\\lin]).plot;\
\
// La regla general es: [niveles], [duraciones], [curvas]\
// Si hay 5 niveles, necesitas 4 duraciones y 4 curvas, o si todas las duraciones o curvas son iguales, puedes pasar 1 \'fanico valor respectivamente:\
\
Env([0, 1, 0.5, 0.5, 0.0], 0.25, \\lin).plot;\
\
// Existen, por conveniencia, envelopes pre-definidos, por ejemplo:\
\
Env.perc(attackTime: ataque, releaseTime: relajacion);\
Env.triangle(dur: duraci\'f3n, level: nivel);\
Env.asr(attackTime: ataque, sustainLevel: sostenimiento, releaseTime: relajaci\'f3n);\
Env.adsr(attackTime: ataque, decayTime: decaimiento, sustainLevel: sostenimiento, releaseTime: relajaci\'f3n);\
Env.circle(levels: niveles, times: tiempos)\
\
Los valores para "curve" o curva en todos estos envelops son bipolares, es decir, pueden ser positivos o negativos. A m\'e1s o menos valor, m\'e1s dram\'e1tica es la curvatura logar\'edtmica o exponencialmente:\
\
Env.perc(attackTime: 0.001, releaseTime: 1, curve: -4).plot;\
Env.perc(attackTime: 0.001, releaseTime: 1, curve: -10).plot;\
Env.perc(attackTime: 0.001, releaseTime: 1, curve: 4).plot;\
Env.perc(attackTime: 0.001, releaseTime: 1, curve: 10).plot;\
\
Antes de continuar, Explora un poco estos envelopes y familiarizate con sus par\'e1metros.\
\

\b Pausa
\b0 \
\

\b Frontal\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 Como hemos visto hasta ahora, los envelopes nos permiten definir trayectorias que van a traves de una serie de puntos. El siguiente paso, a fin de poder usar estos puntos para modular par\'e1metros, es pasar los valores definidos en el envelope a un generador de envelopes, llamado EnvGen.
\b \
\
C\'f3digo\

\b0 \
Los generadores EnvGen nos permiten crear un objecto apto para interactuar con osciladores y al cual le podemos dar un acci\'f3n a ejecutar cuando ha sido completado\
\
Escribamos por ejemplo:\
\
EnvGen.kr(Env.perc(0.001, 1), doneAction: 2); // "2" significa liberar la memoria de un synth (generador de sonido)\
\
nos vamos a limitar a usar doneAction: "0" (no hacer nada) y doneAction: "2" (liberar) en todo nuestro tutorial, pese a que existen otras varias directrices posibles.\
\
Evaluar esta l\'ednea no produce ning\'fan sonido, porque el modo de usar este generador es multiplic\'e1ndolo por una se\'f1al o us\'e1ndola para modular alg\'fan par\'e1metro.\
\
/Generemos ahora sonidos con nuestros envelopes!\
\{\
 SinOsc.ar(440, 0, 1) * EnvGen.kr(Env.perc(0.001, 1), doneAction: 2) \}.play;\
\{ SinOsc.ar(440, 0, 1) * EnvGen.kr(Env([0, 1, 0.5, 0.5, 0], [0.001, 0.1,0.25, 2], \\lin), doneAction: 2) \}.play;\
\{ SinOsc.ar(440, 0, 1) * EnvGen.kr(Env.triangle(2, 1), doneAction: 2) \}.play;\
\{ SinOsc.ar(440, 0, 1) * EnvGen.kr(Env([0,1,0,1,0,1,0], 0.1), doneAction: 2) \}.play;\
\
\
Todos estos synths se liberan a s\'ed mismos de la memoria, gracias a doneAction: 2\
Observa lo que ocurre en el monitor del lado inferior derecho, en los porcentajes, y en s(ynths) cuando usamos doneAction: 0\
\
\{ SinOsc.ar(440, 0, 1) * EnvGen.kr(Env.perc(0.001, 1), doneAction: 0) \}.play;\
\
Si evaluamos esto varias veces, veremos que la memoria en uso crece y que m\'e1s y m\'e1s synths est\'e1n en uso. Llamamos por cierto \'93synths\'94 a los eventos sonoros en SuperCollider.\
\
Crear synths apilados que no suenan es un desperdicio de memoria, por esta raz\'f3n, usamos doneAction: 2 cuando tenemos sonidos temporales, de otro modo, tenemos que liberar esta memoria usando cmd + .\
\
Recuerdas c\'f3mo modular una onda? Podemos usar envelopes para hacerlo...\
\{ SinOsc.ar(EnvGen.kr(Env([100, 2000, 250], [0.25, 0.1], \\exp), doneAction: 2)) \}.play;\
\
Deconstruyamos esta l\'ednea, paso a paso:\
(\
\{\
	var frecEnv = Env([100, 2000, 250], [0.25, 0.1], \\exp); // de 100 a 2000 hz en 0.25secs y a 250hz en 0.1secs\
	var gen = EnvGen.kr(frecEnv, doneAction: 2); // pasamos el envelope al generador de envelopes\
	var sin = SinOsc.ar(freq: gen); // modular la frecuencia con el generador\
	sin\
\}.play;\
)\
\
Sin embargo, \'bfnotas algo en este ejemplo? ...el sonido hace un click al final... \'bfpor qu\'e9?\
\
La raz\'f3n es que estamos liberando el synth al terminar la modulaci\'f3n de frecuencia en 250hz pero no cambiamos nunca la amplitud del sonido. Cortamos la se\'f1al de 1.0 a 0.0 en seco, sin ninguna transici\'f3n. Esto crea el click.\
\
La soluci\'f3n es modular tambi\'e9n la amplitud de forma que el sonido termine cuando esta es 0 y no cuando la frecuencia es 250hz.\
\
Solucionemos este click:\
\
(\
\{\
	var frecEnv = Env([100, 2000, 250], [0.25, 0.1], \\exp); // envelope de frecuencia\
	var ampEnv = Env([0, 1, 0], [0.25, 0.1], \\lin); // envelope de amplitud\
	var genFreq = EnvGen.kr(frecEnv, doneAction: 0); // generador de envelope para frecuencia\
	var genAmp = EnvGen.kr(ampEnv, doneAction: 2); // generador de envelope para amplitud\
	var sin = SinOsc.ar(freq: genFreq, mul: genAmp); // modular la frecuencia y la amplitud con los generadores\
	sin\
\}.play;\
)\
 Nota que usamos doneAction: 0 para la frecuencia, porque no nos importa que este generador se libere. En su lugar, hemos asignado doneAction al generador para la amplitud, de modo que se libere cuando la amplitud es 0.\
Esto evita el click inicial\
\
\
// Otra forma de obtener lo mismo, es multiplicar el Envelope por la se\'f1al:\
(\
\{\
	var frecEnv = Env([100, 2000, 250], [0.25, 0.1], \\exp);\
	var ampEnv = Env([0, 1, 0], [0.25, 0.1], \\lin);\
	var genFreq = EnvGen.kr(frecEnv, doneAction: 0);\
	var genAmp = EnvGen.kr(ampEnv, doneAction: 2);\
	var sin = SinOsc.ar(freq: genFreq) * genAmp; // <- multiplicar la se\'f1al cambia la amplitud\
	sin\
\}.play;\
)\
\
\
\'bfPuedes crear una onda sinusoide que vaya de 100 a 2000hz exponencialmente en 10 segundos pero que aparece y desaparece en 12 segundos?\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}